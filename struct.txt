//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.12;
  
contract Demo{
    Person[] public people;
    uint256 public peopleCount;
     
    struct Person{
        string _firstName;
        string _lastName;

    }
    function addPerson(string memory _firstName, string memory _lastName) public{
       
        people.push(Person(_firstName,_lastName));
        peopleCount += 1; 
    }
} 


//mapping
//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.12;
  
contract Demo{
    
    uint256 public peopleCount;
    mapping(uint => Person) public people;
     
    struct Person{
        uint _id;
        string _firstName;
        string _lastName;

    }
    function addPerson(string memory _firstName, string memory _lastName) public{
       peopleCount += 1; 
       people[peopleCount] = Person(peopleCount, _firstName, _lastName);
       
        
    }
} 




//to keep travck of owner using modifier
//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.12;
  
contract Demo{
    
    uint256 public peopleCount;
    mapping(uint => Person) public people;

    address owner;
    modifier onlyOwner(){
        require(msg.sender == owner);
        _;
    }
     
    struct Person{
        uint _id;
        string _firstName;
        string _lastName;

    }
     constructor() public{
        owner= msg.sender;
    }

    function addPerson(string memory _firstName, string memory _lastName) public onlyOwner{
       peopleCount += 1; 
       people[peopleCount] = Person(peopleCount, _firstName, _lastName);
       
        
    }

    function incrementCount() internal {
        peopleCount +=1;
    }
} 




//timestamp
//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.12;
  
contract Demo{
    
    uint256 public peopleCount;
    mapping(uint => Person) public people;
    
    uint256 openingTime = 1645540062; 

   
    modifier onlyWhileOpen(){
        require(block.timestamp >= openingTime);
        _;
    }
     
    struct Person{
        uint _id;
        string _firstName;
        string _lastName;

    }
    

    function addPerson(
        string memory _firstName,
        string memory _lastName
        )
     public onlyWhileOpen{
       incrementCount(); 
       people[peopleCount] = Person(peopleCount, _firstName, _lastName);
       
        
    }

    function incrementCount() internal {
        peopleCount +=1;
    }
} 